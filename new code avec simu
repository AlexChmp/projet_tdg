#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define taille 20

typedef struct {
    float populations[100];       // Populations actuelles
    float growth_rates[100];      // Taux de croissance des espèces
    float carrying_capacities[100]; // Capacités de charge
} PopulationData;

void initialize_population_data(int n, PopulationData *pop_data) {
    for (int i = 0; i < n; i++) {
        pop_data->populations[i] = (rand() % 50) + 50; // Population initiale entre 50 et 100
        pop_data->growth_rates[i] = (rand() % 5 + 1) / 10.0; // Taux de croissance entre 0.1 et 0.5
        pop_data->carrying_capacities[i] = (rand() % 200) + 100; // Capacité de charge entre 100 et 300
    }
}

// Fonction pour lire le graph depuis un fichier
void lecturetxt(const char *filename, int *n, char especes[][taille], double matriceajd[][100]) {
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        perror("Erreur lors de l'ouverture du fichier");
        exit(EXIT_FAILURE);
    }

    fscanf(file, "%d", n); // Lire le nombre d'espèces

    // Lire les noms des espèces
    for (int i = 0; i < *n; i++) {
        fscanf(file, "%s", especes[i]);
    }

    // Lire la matrice d'adjacence avec les poids
    for (int i = 0; i < *n; i++) {
        for (int j = 0; j < *n; j++) {
            fscanf(file, "%lf", &matriceajd[i][j]);
        }
    }

    fclose(file);
}

void update_population_dynamics(
        int n,
        double adjacency_matrix[][100],
        char species[][taille],
        PopulationData *pop_data,
        int iterations
) {
    float new_populations[100];

    for (int t = 0; t < iterations; t++) {
        printf("\nIteration %d:\n", t + 1);
        for (int i = 0; i < n; i++) {
            float adjusted_capacity = pop_data->carrying_capacities[i];

            // Contribution des autres espèces à la capacité de charge
            for (int j = 0; j < n; j++) {
                if (adjacency_matrix[j][i] > 0) {
                    adjusted_capacity += adjacency_matrix[j][i] * pop_data->populations[j];
                }
            }

            // Protéger contre des ajustements nuls ou négatifs
            if (adjusted_capacity <= 0) {
                adjusted_capacity = 1; // Valeur minimale pour éviter les divisions par zéro
            }




            // Calcul de la nouvelle population
            new_populations[i] = pop_data->populations[i] +
                                 pop_data->growth_rates[i] * pop_data->populations[i];
                                 (1 - pop_data->populations[i] / adjusted_capacity);

            // Impact des autres espèces
            for (int j = 0; j < n; j++) {
                if (adjacency_matrix[i][j] > 0) {
                    new_populations[i] -= adjacency_matrix[i][j] * pop_data->populations[j];
                }
            }

            // Protéger contre les valeurs négatives
            if (new_populations[i] < 0) {
                new_populations[i] = 0;
            }
        }

        // Mise à jour des populations
        for (int i = 0; i < n; i++) {
            pop_data->populations[i] = new_populations[i];
            printf("%s: %.0f\n", species[i], pop_data->populations[i]);
        }
    }
}

// Fonction pour rechercher un animal et afficher ce qu'il mange et ce qui le mange
void rechercher_animal(int n, char especes[][taille], double matriceajd[][100]) {
    char animal[taille];
    printf("Entrez le nom de l'animal a interroger : ");
    scanf("%s", animal);

    // Trouver l'index de l'animal
    int index = -1;
    for (int i = 0; i < n; i++) {
        if (strcmp(especes[i], animal) == 0) {
            index = i;
            break;
        }
    }

    if (index == -1) {
        printf("Animal non trouve dans le reseau.\n");
        return;
    }

    // Afficher ce qu'il mange (successeurs)
    printf("%s mange : ", animal);
    int has_prey = 0;
    for (int j = 0; j < n; j++) {
        if (matriceajd[index][j] > 0) {
            printf("%s (poids: %.1f) ", especes[j], matriceajd[index][j]);
            has_prey = 1;
        }
    }
    if (!has_prey) {
        printf("Rien");
    }
    printf("\n");

    // Afficher ce qui le mange (prédécesseurs)
    printf("Les animaux qui mangent %s : ", animal);
    int has_predators = 0;
    for (int i = 0; i < n; i++) {
        if (matriceajd[i][index] > 0) {
            printf("%s (poids: %.1f) ", especes[i], matriceajd[i][index]);
            has_predators = 1;
        }
    }
    if (!has_predators) {
        printf("Rien");
    }
    printf("\n");
}
// Fonction pour afficher le réseau trophique
void affichertxt(int n, char especes[][taille], double matriceajd[][100]) {
    printf("Reseau trophique :\n");
    for (int i = 0; i < n; i++) {
        printf("%s mange : ", especes[i]);
        int boolproie = 0;
        for (int j = 0; j < n; j++) {
            if (matriceajd[i][j] > 0) { // Vérifie si le poids est significatif
                printf("%s (poids: %.1f) ", especes[j], matriceajd[i][j]);
                boolproie = 1;
            }
        }
        if (!boolproie) {
            printf("Rien");
        }
        printf("\n");
    }
}

// Fonction pour interroger une espèce spécifique
void recherche(int n, char especes[][taille], int matriceajd[][100]) {
    char animal[taille];
    printf("Entrez le nom de l'animal a interroger : ");
    scanf("%s", animal);

    // Trouver l'index de l'animal
    int index = -1;
    for (int i = 0; i < n; i++) {
        if (strcmp(especes[i], animal) == 0) {
            index = i;
            break;
        }
    }

    if (index == -1) {
        printf("Animal non trouve dans le reseau.\n");
        return;
    }

    // Demander à l'utilisateur quel type de requête il souhaite
    int choice;
    printf("Que voulez-vous savoir sur %s ?\n", animal);
    printf("1. Que mange-t-il ?\n");
    printf("2. Qui mange-t-il ?\n");
    printf("3. Que mange-t-il et qui mange-t-il ?\n");
    printf("Entrez votre choix (1, 2 ou 3) : ");
    scanf("%d", &choice);

    if (choice == 1) {
        // Que mange-t-il ?
        printf("%s mange : ", animal);
        int boolproie = 0;
        for (int j = 0; j < n; j++) {
            if (matriceajd[index][j] == 1) {
                printf("%s ", especes[j]);
                boolproie = 1;
            }
        }
        if (!boolproie) {
            printf("Rien\n");
        } else {
            printf("\n");
        }
    } else if (choice == 2) {
        // Qui mange-t-il ?
        printf("Les animaux qui mangent %s : ", animal);
        int has_predators = 0;
        for (int i = 0; i < n; i++) {
            if (matriceajd[i][index] == 1) {
                printf("%s ", especes[i]);
                has_predators = 1;
            }
        }
        if (!has_predators) {
            printf("Rien\n");
        } else {
            printf("\n");
        }
    } else if (choice == 3) {
        // Que mange-t-il et qui mange-t-il ?
        // Que mange-t-il ?
        printf("%s mange : ", animal);
        int boolproie = 0;
        for (int j = 0; j < n; j++) {
            if (matriceajd[index][j] == 1) {
                printf("%s ", especes[j]);
                boolproie = 1;
            }
        }
        if (!boolproie) {
            printf("Rien\n");
        } else {
            printf("\n");
        }

        // Qui mange-t-il ?
        printf("Les animaux qui mangent %s : ", animal);
        int has_predators = 0;
        for (int i = 0; i < n; i++) {
            if (matriceajd[i][index] == 1) {
                printf("%s ", especes[i]);
                has_predators = 1;
            }
        }
        if (!has_predators) {
            printf("Rien\n");
        } else {
            printf("\n\n\n\n\n\n");
        }
    } else {
        printf("Choix invalide.\n");
    }
}
void afficher_sommets(int n, char especes[][taille]) {
    printf("\n=== Liste des animaux du reseau ===\n");
    for (int i = 0; i < n; i++) {
        printf("- %s\n", especes[i]);
    }
    printf("===================================\n");
}

void conversion_dot(const char *filename, int n, char especes[][taille], double matriceajd[][100]) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        perror("Erreur lors de la création du fichier DOT");
        exit(EXIT_FAILURE);
    }

    fprintf(file, "digraph trophic_network {\n");

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (matriceajd[i][j] > 0) {
                fprintf(file, "    \"%s\" -> \"%s\" [label=\"%.1f\"];\n", especes[i], especes[j], matriceajd[i][j]);
            }
        }
    }

    fprintf(file, "}\n");
    fclose(file);
    printf("Fichier DOT genere : %s\n", filename);
}
// Fonction pour afficher le réseau trophique (les arcs et les poids)
void afficher_reseau(int n, char especes[][taille], double matriceajd[][100]) {
    printf("\n=== Reseau trophique (arcs) ===\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (matriceajd[i][j] > 0) {
                printf("%s -> %s (poids: %.1f)\n", especes[i], especes[j], matriceajd[i][j]);
            }
        }
    }
    printf("===============================\n");
}
void afficher_menu(int n, char especes[][taille], double matriceajd[][100], PopulationData *pop_data) {
    int choix;
    do {
        printf("\n=============== MENU ===============\n");
        printf("1. Afficher les sommets\n");
        printf("2. Afficher le reseau trophique (les arcs)\n");
        printf("3. Verifier la connexite\n");
        printf("4. Demander des renseignements sur un animal\n");
        printf("5. Simuler le reseau\n");
        printf("6. Simuler la disparition d'une espece\n");
        printf("7. Sauvegarder le reseau\n");
        printf("8. Rechercher un sommet particulier\n");
        printf("9. Quitter\n");
        printf("====================================\n");
        printf("Entrez votre choix : ");
        scanf("%d", &choix);

        switch (choix) {
            case 1:
                afficher_sommets(n, especes);
                break;
            case 2:
                afficher_reseau(n, especes, matriceajd);
                break;
            case 3:
                printf("\nOption non implementee pour le moment.\n");
                break;
            case 4:
                rechercher_animal(n, especes, matriceajd);
                break;
            case 5: {
                int iterations;
                printf("Entrez le nombre d'iterations pour la simulation : ");
                scanf("%d", &iterations);
                update_population_dynamics(n, matriceajd, especes, pop_data, iterations);
                break;
            }
            case 6:
                printf("\nOption non implementee pour le moment.\n");
                break;
            case 9:
                printf("Au revoir !\n");
                break;
            default:
                printf("Option invalide. Veuillez reessayer.\n");
        }
    } while (choix != 9);
}



int main() {
    double matriceajd[100][100]; // Matrice d'adjacence avec poids

    int choice;
    const char *filename;
    const char *dotname;
    int n; // Nombre d'espèces
    PopulationData pop_data;
    initialize_population_data(12, &pop_data);
    char especes[100][taille]; // Tableau des noms des espèces

    while (1){
        // Menu pour choisir le réseau trophique
        printf("Choisissez le reseau trophique :\n");
        printf("1. Reseau trophique de la jungle\n");
        printf("2. Reseau trophique du monde marin\n");
        printf("3. simuler un reseau\n");
        printf("4. Quitter\n");

        printf("Entrez votre choix (1 , 2 , 3, 4) : ");
        scanf("%d", &choice);


        if (choice == 1) {
            filename = "matricejungle.txt";
            dotname = "matricejungle.dot";
            // Lire le graph depuis le fichier
            lecturetxt(filename, &n, especes, matriceajd);
            conversion_dot(dotname, n, especes, matriceajd);
            afficher_menu(n, especes, matriceajd,&pop_data);
        } else if (choice == 2) {
            filename = "matricemondemarin.txt";
            dotname = "matricemondemarin.dot";
            lecturetxt(filename, &n, especes, matriceajd);
            // Afficher le réseau trophique choisi
            conversion_dot(dotname, n, especes, matriceajd);
            afficher_menu(n, especes, matriceajd,&pop_data);
        }
        else if (choice == 3){

        }
        else if (choice == 4) {
            break;
        }
        else {
            printf("Choix invalide.\n");
            return 1;
        }


        // Interroger une espèce spécifique
        //recherche(n, especes, matriceajd);

    }

    return 0;
}
